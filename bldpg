#!/usr/bin/env bash
PGDIR=$HOME/pg

clean="do"
regress="do"
optimize="no"
cassert="yes"
debug="yes"
# --option sanity if $1 specified
if [ ! -z "$1" -a "$1" != "--no-clean" -a "$1" != "--no-regress" -a "$1" != "--optimize" -a "$1" != "--no-cassert" -a "$1" != "--no-debug" ]; then
	echo "** invalid option (allowed values are: --no-clean or --no-regress or --optimize or --no-cassert or --no-debug) ** on line $LINENO"
	return 1
elif [ "$1" == "--no-clean" ]; then
	clean="dont"
elif [ "$1" == "--no-regress" ]; then
	regress="dont"
elif [ "$1" == "--optimize" ]; then
	optimize="yes"
elif [ "$1" == "--no-cassert" ]; then
	cassert="no"
elif [ "$1" == "--no-debug" ]; then
	debug="no"
fi

# --option sanity if $2 specified
if [ ! -z "$2" -a "$2" != "--no-regress" -a "$2" != "--optimize" -a "$2" != "--no-cassert" -a "$2" != "--no-debug" ]; then
	echo "** option 2 can only ever be --no-regress or --optimize or --no-cassert or --no-debug ** on line $LINENO"
	return 1
elif [ "$2" == "--no-regress" ]; then
	regress="dont"
elif [ "$2" == "--optimize" ]; then
	optimize="yes"
elif [ "$2" == "--no-cassert" ]; then
	cassert="no"
elif [ "$2" == "--no-debug" ]; then
	debug="no"
fi

# --option sanity if $3 specified
if [ ! -z "$3" -a "$3" != "--optimize" -a "$3" != "--no-cassert" -a "$3" != "--no-debug" ]; then
	echo "** option 3 can only ever be --optimize or --no-cassert or --no-debug ** on line $LINENO"
	return 1
elif [ "$3" == "--optimize" ]; then
	optimize="yes"
elif [ "$3" == "--no-cassert" ]; then
	cassert="no"
elif [ "$3" == "--no-debug" ]; then
	debug="no"
fi

# --option sanity if $4 specified
if [ ! -z "$4" -a "$4" != "--no-cassert" -a "$4" != "--no-debug" ]; then
	echo "** option 4 can only ever be --no-cassert or --no-debug ** on line $LINENO"
	return 1
elif [ "$4" == "--no-cassert" ]; then
	cassert="no"
elif [ "$4" == "--no-debug" ]; then
	debug="no"
fi

# --option sanity if $5 specified
if [ ! -z "$5" -a "$5" != "--no-debug" ]; then
	echo "** option 4 can only ever be --no-debug ** on line $LINENO"
	return 1
elif [ "$5" == "--no-debug" ]; then
	debug="no"
fi

# make clean if not asked not to
if [ "$clean" != "dont" ]; then
	gmake clean 2>&1 > /dev/null
	echo "** all cleaned up **"
	echo ""
fi

{
	gccpath=`which gcc`
	if [ "$optimize" = "yes" ]; then
		opt="1";
	else
		opt="0";
	fi
	if [ "$cassert" = "yes" ]; then
		enable_assert="--enable-cassert"
		asserts_status="enabled"
	else
		enable_assert=""
		asserts_status="disabled"
	fi
	if [ "$debug" = "yes" ]; then
		enable_debug="--enable-debug"
		debug_status="enabled"
	else
		enable_debug=""
		debug_status="disabled"
	fi
	echo "Building with: $gccpath [-O$opt] [asserts $asserts_status] [debug $debug_status]"
    CFLAGS="-O$opt -g3 -fno-omit-frame-pointer -Wunused -Wreturn-type -Wall -Wmaybe-uninitialized" \
    ./configure $enable_debug $enable_assert --enable-tap-tests --prefix=$PGDIR/install/head
    gmake -j3
    gmake install
} 2>&1 | grep -B1 "Building with\|warning:\|error:"

# done building. run make check if not asked not to.
if [ "$regress" != "dont" ]; then
	gmake check
fi

# add to PATH only if not already done
currentpgpath=`which postgres`
newpgpath=$PGDIR/install/head/bin/postgres
if [ "$currentpgpath" == "$newpgpath" ]; then
	PATH=$PATH
else
	PATH=$PGDIR/install/head/bin:$PATH
fi
export PATH
return 0
